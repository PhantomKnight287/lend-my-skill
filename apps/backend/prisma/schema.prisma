generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Freelancer @map("freelancer")
  Client     @map("client")
}

model User {
  id               String   @id @unique @default(cuid())
  email            String   @unique
  password         String
  name             String
  username         String   @unique
  country          String   @default("India")
  verified         Boolean  @default(false)
  role             Role
  emailVerified    Boolean  @default(false)
  profileCompleted Boolean  @default(false)
  bio              String   @default("")
  avatarUrl        String   @default("")
  upiId            String   @default("")
  paypalEmail      String   @default("")
  kycCompleted     Boolean  @default(false)
  phone            String   @default("")
  kycDocuments     String[]

  services Service[]
  uploads  Uploads[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This will be helpful to moderate the content and also get rid of it when it is not required
model Uploads {
  id        String   @id @unique @default(cuid())
  url       String
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @unique @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  slug      String    @unique
  services  Service[]
}

model Tags {
  id        String    @id @unique @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  slug      String    @unique
  service   Service[]
}

model Service {
  id          String   @id @unique @default(cuid())
  title       String
  description String
  slug        String   @unique
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  bannerImage String
  images      String[]

  tags     Tags[]
  package  Package[]
  features Feature[]
  user     User?     @relation(fields: [userId], references: [id])
  userId   String?

  createdAt DateTime @default(now())
}

model Package {
  id           String    @id @unique @default(cuid())
  name         String
  price        Int
  description  String?
  deliveryDays Int
  service      Service   @relation(fields: [serviceId], references: [id])
  features     Feature[]
  serviceId    String

  createdAt DateTime @default(now())
}

model Feature {
  id         String    @id @unique @default(cuid())
  name       String
  packages   Package[]
  includedIn String[]
  service    Service?  @relation(fields: [serviceId], references: [id])
  serviceId  String?

  createdAt DateTime @default(now())
}
