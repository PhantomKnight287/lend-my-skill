generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Freelancer {
  id                String  @id @unique @default(cuid())
  name              String
  username          String  @unique
  email             String  @unique
  password          String
  country           String  @default("India")
  githubId          String?
  linkedinUsername  String?
  twitterUsername   String?
  facebookUsername  String?
  instagramUsername String?

  kycDocuments     String[]
  kycCompleted     Boolean  @default(false)
  phoneNumber      String?
  profileCompleted Boolean  @default(false)

  banned    Boolean @default(false)
  banReason String?

  avatarUrl   String?
  bio         String?
  aboutMe     String?
  paypalEmail String?
  upiId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  verified      Boolean @default(false)
  emailVerified Boolean @default(false)

  services        Service[]
  quotations      Quotation[]
  claimedJobPosts JobPost[]
  Order           Order[]
  chat            Chat[]
  Message         Message[]

  rating  Float?   @default(0)
  reviews Review[]
}

model Client {
  id       String  @id @unique @default(cuid())
  name     String
  username String  @unique
  email    String  @unique
  password String
  country  String  @default("India")
  aboutMe  String?

  githubId          String?
  linkedinUsername  String?
  twitterUsername   String?
  facebookUsername  String?
  instagramUsername String?
  
  banned    Boolean @default(false)
  banReason String?

  kycDocuments String[]
  kycCompleted Boolean  @default(false)
  phoneNumber  String?

  profileCompleted Boolean @default(false)

  avatarUrl   String?
  bio         String?
  paypalEmail String?
  upiId       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  verified      Boolean   @default(false)
  emailVerified Boolean   @default(false)
  JobPost       JobPost[]
  order         Order[]
  Chat          Chat[]
  Message       Message[]
  Review        Review[]
}

model Service {
  id           String      @id @unique @default(cuid())
  title        String
  description  String
  slug         String      @unique
  category     Category    @relation(fields: [categoryId], references: [id])
  tags         String[]
  images       String[]
  bannerImage  String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id])
  freelancerId String?
  categoryId   String
  questions    Question[]
  Package      Package[]
  features     Features[]
  Order        Order[]
}

model JobPost {
  id          String    @id @unique @default(cuid())
  title       String
  description String
  slug        String    @unique
  category    Category  @relation(fields: [categoryId], references: [id])
  tags        String[]
  images      String[]
  budget      Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deadline    DateTime?

  quotation  Quotation[]
  author     Client      @relation(fields: [clientId], references: [id])
  clientId   String
  categoryId String

  claimed      Boolean     @default(false)
  claimedBy    Freelancer? @relation(fields: [freelancerId], references: [id])
  freelancerId String?
}

model Quotation {
  id           String      @id @unique @default(cuid())
  description  String
  price        Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id])
  freelancerId String?
  JobPost      JobPost?    @relation(fields: [jobPostId], references: [id])
  jobPostId    String?
}

model Category {
  id        String    @id @unique @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  slug      String    @unique @default(cuid())
  service   Service[]
  JobPost   JobPost[]
}

model Package {
  id           String  @id @unique @default(cuid())
  name         String
  price        Int
  description  String?
  deliveryDays Int

  service Service @relation(fields: [serviceId], references: [id])

  features  Features[]
  serviceId String
  Order     Order[]
}

model Features {
  id         String    @id @unique @default(cuid())
  name       String
  packages   Package[]
  includedIn String[]
  service    Service?  @relation(fields: [serviceId], references: [id])
  serviceId  String?
}

model Question {
  id          String     @id @default(cuid())
  question    String
  answerType  AnswerType @default(TEXT)
  attachments String[]
  isRequired  Boolean    @default(false)
  service     Service    @relation(references: [id], fields: [serviceId])
  serviceId   String
  choices     Choices[]
}

model Choices {
  id         String   @id @default(cuid())
  choice     String
  question   Question @relation(references: [id], fields: [questionId])
  questionId String
}

enum AnswerType {
  TEXT
  MULTIPLE_CHOICE
  ATTACHMENT
}

model Order {
  id                       String        @id @default(cuid())
  paymentId                String        @unique
  service                  Service       @relation(fields: [serviceId], references: [id])
  serviceId                String
  amountPaid               Float?
  freelancer               Freelancer    @relation(fields: [freelancerId], references: [id])
  freelancerId             String
  client                   Client        @relation(fields: [clientId], references: [id])
  clientId                 String
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  status                   OrderStatus   @default(PENDING)
  price                    Int
  deliveryDays             Int
  attachments              String[]
  deadline                 DateTime?
  package                  Package?      @relation(fields: [packageId], references: [id])
  packageId                String?
  DiscountCode             DiscountCode? @relation(fields: [discountCodeId], references: [id])
  discountCodeId           String?
  Chat                     Chat?
  markedAsDoneByFreelancer Boolean       @default(false)
  markedAsDoneByClient     Boolean       @default(false)
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model DiscountCode {
  id                 String           @id @default(cuid())
  code               String           @unique
  discountAmount     Int?
  discountPercentage Int?
  order              Order[]
  expiryDate         DateTime
  type               DiscountCodeType @default(PERCENTAGE)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

enum DiscountCodeType {
  PERCENTAGE
  AMOUNT
}

model Chat {
  id               String     @id @unique @default(cuid())
  order            Order      @relation(fields: [orderId], references: [id])
  orderId          String     @unique
  freelancer       Freelancer @relation(fields: [freelancerId], references: [id])
  freelancerId     String
  client           Client     @relation(fields: [clientId], references: [id])
  clientId         String
  questionAnswered Boolean    @default(false)
  messages         Message[]
}

model Message {
  id           String      @id @unique @default(cuid())
  chat         Chat?       @relation(fields: [chatId], references: [id])
  chatId       String?
  content      String?
  attachments  String[]    @default([])
  freelancer   Freelancer? @relation(fields: [freelancerId], references: [id])
  freelancerId String?
  client       Client?     @relation(fields: [clientId], references: [id])
  clientId     String?
  createdAt    DateTime    @default(now())
  type         MessageType @default(BASIC)
  bySystem     Boolean     @default(false)
}

enum MessageType {
  BASIC
  CONFIRM_AND_CANCEL_PROMPT
}

model Review {
  id        String   @id @unique @default(cuid())
  rating    Float
  comment   String
  createdAt DateTime @default(now())

  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
  freelancerId String

  author   Client @relation(fields: [clientId], references: [id])
  clientId String
}
